{"ast":null,"code":"import _slicedToArray from\"/Users/hbrown/Documents/custom_components/clickable_card/template/clickable_card/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React, { useEffect, ReactNode } from \"react\";\nimport{Streamlit,withStreamlitConnection}from\"streamlit-component-lib\";import React,{useEffect}from\"react\";// import Box from '@material-ui/core/Box'\n// import { createTheme } from '@material-ui/core/styles';\n// import { Slider, Grid } from \"@material-ui/core\";\n// import { ThemeProvider } from '@material-ui/styles';\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ClickableCard=function ClickableCard(props){// Arguments that are passed to the plugin in Python are accessible\n// via `this.props.args`. Here, we access the \"name\" arg.\nuseEffect(function(){return Streamlit.setFrameHeight(315);});// const name = props.args[\"name\"]\nvar image_path=props.args[\"path\"];// var clicked = false\nvar _React$useState=React.useState(props.args[\"name\"]),_React$useState2=_slicedToArray(_React$useState,2),name=_React$useState2[0],setName=_React$useState2[1];// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=props.theme;var click_style={display:\"grid\",width:\"300px\",height:\"300px\",borderRadius:\"15px\",color:\"black\",cursor:\"pointer\",gridTemplateRows:\"200px 50px\",// lineHeight: \"10px\",\n// float: \"left\",\nboxShadow:\"0 3px 3px 3px black\",overflow:\"hidden\",marginLeft:\"20px\",opacity:\"0.5\"};var hover_style={display:\"grid\",width:\"300px\",height:\"300px\",borderRadius:\"15px\",color:\"black\",cursor:\"pointer\",gridTemplateRows:\"200px 50px\",// lineHeight: \"10px\",\n// float: \"left\",\nboxShadow:\"0 3px 10px 2px #444\",overflow:\"hidden\",marginLeft:\"20px\"};var card_style={display:\"grid\",width:\"250px\",height:\"250px\",borderRadius:\"15px\",color:\"black\",cursor:\"pointer\",gridTemplateRows:\"175px 50px\",// lineHeight: \"10px\",\n// float: \"left\",\nboxShadow:\"5px 5px 10px #aaa\",overflow:\"hidden\",marginLeft:\"20px\"};var _React$useState3=React.useState(card_style),_React$useState4=_slicedToArray(_React$useState3,2),clicked=_React$useState4[0],setState=_React$useState4[1];var img_style={objectFit:\"cover\",width:\"100%\",height:\"100%\"};var title_style={alignItems:\"right\",objectFit:\"cover\",padding:\"10px\",fontSize:\"25px\"};// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\n// if (theme) {\n//   // Use the theme object to style our button border. Alternatively, the\n//   // theme style is defined in CSS vars.\n//   // const borderStyling = `1px solid ${\n//   //   this.state.isFocused ? theme.primaryColor : \"gray\"\n//   // }`\n//   style.border = borderStyling\n//   style.outline = borderStyling\n// }\nonmouseover=function onmouseover(e){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nsetState(hover_style);// setValue(name)\n};onmousedown=function onmousedown(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nsetState(click_style);Streamlit.setComponentValue(name);// setValue(name)\n};onmouseout=function onmouseout(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nsetState(card_style);// setValue(name)\n};onmouseup=function onmouseup(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nsetState(card_style);// setValue(name)\n};// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/_jsxs(\"div\",{onMouseDown:function onMouseDown(){return onmousedown;},style:clicked,onMouseOut:function onMouseOut(){return onmouseout;},onMouseOver:function onMouseOver(){return onmouseover;},onMouseUp:function onMouseUp(){return onmouseup;},children:[/*#__PURE__*/_jsx(\"img\",{style:img_style,src:image_path,alt:\"App_Image\"}),/*#__PURE__*/_jsx(\"h1\",{style:title_style,children:name})]});/** Click handler for our \"Click Me!\" button. */ /** Focus handler for our \"Click Me!\" button. */ // private _onFocus = (): void => {\n//   this.setState({ isFocused: true })\n// }\n// /** Blur handler for our \"Click Me!\" button. */\n// private _onBlur = (): void => {\n//   this.setState({ isFocused: false })\n// }\n};// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(ClickableCard);","map":{"version":3,"names":["Streamlit","withStreamlitConnection","React","useEffect","jsx","_jsx","jsxs","_jsxs","ClickableCard","props","setFrameHeight","image_path","args","_React$useState","useState","_React$useState2","_slicedToArray","name","setName","theme","click_style","display","width","height","borderRadius","color","cursor","gridTemplateRows","boxShadow","overflow","marginLeft","opacity","hover_style","card_style","_React$useState3","_React$useState4","clicked","setState","img_style","objectFit","title_style","alignItems","padding","fontSize","onmouseover","e","onmousedown","setComponentValue","onmouseout","onmouseup","onMouseDown","style","onMouseOut","onMouseOver","onMouseUp","children","src","alt"],"sources":["/Users/hbrown/Documents/custom_components/clickable_card/template/clickable_card/frontend/src/MyComponent.tsx"],"sourcesContent":["// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React, { useEffect, ReactNode } from \"react\";\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { useEffect } from \"react\"\n// import Box from '@material-ui/core/Box'\n// import { createTheme } from '@material-ui/core/styles';\n// import { Slider, Grid } from \"@material-ui/core\";\n// import { ThemeProvider } from '@material-ui/styles';\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst ClickableCard = (props: ComponentProps) => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    useEffect(() => Streamlit.setFrameHeight(315));\n    // const name = props.args[\"name\"]\n    const image_path = props.args[\"path\"]\n    // var clicked = false\n    const [name, setName] = React.useState(\n      props.args[\"name\"]\n    )\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = props\n    const click_style: React.CSSProperties = {\n      display: \"grid\",\n      width: \"300px\",\n      height: \"300px\",\n      borderRadius: \"15px\",\n      color: \"black\",\n      cursor: \"pointer\",\n      gridTemplateRows:\"200px 50px\",\n      // lineHeight: \"10px\",\n      // float: \"left\",\n      boxShadow: \"0 3px 3px 3px black\",\n      overflow:\"hidden\",\n      marginLeft: \"20px\",\n      opacity: \"0.5\"\n    }\n\n    const hover_style: React.CSSProperties = {\n      display: \"grid\",\n      width: \"300px\",\n      height: \"300px\",\n      borderRadius: \"15px\",\n      color: \"black\",\n      cursor: \"pointer\",\n      gridTemplateRows:\"200px 50px\",\n      // lineHeight: \"10px\",\n      // float: \"left\",\n      boxShadow: \"0 3px 10px 2px #444\",\n      overflow:\"hidden\",\n      marginLeft: \"20px\"\n    }\n\n    const card_style: React.CSSProperties = {\n      display: \"grid\",\n      width: \"250px\",\n      height: \"250px\",\n      borderRadius: \"15px\",\n      color: \"black\",\n      cursor: \"pointer\",\n      gridTemplateRows:\"175px 50px\",\n      // lineHeight: \"10px\",\n      // float: \"left\",\n      boxShadow: \"5px 5px 10px #aaa\",\n      overflow:\"hidden\",\n      marginLeft: \"20px\"\n    }\n\n    var [clicked, setState] = React.useState(\n      card_style\n    )\n\n    const img_style: React.CSSProperties = {\n      objectFit: \"cover\",\n      width: \"100%\",\n      height:\"100%\"\n    }\n\n    const title_style: React.CSSProperties = {\n      alignItems: \"right\",\n      objectFit: \"cover\",\n      padding:\"10px\",\n      fontSize:\"25px\"\n    }\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    // if (theme) {\n    //   // Use the theme object to style our button border. Alternatively, the\n    //   // theme style is defined in CSS vars.\n    //   // const borderStyling = `1px solid ${\n    //   //   this.state.isFocused ? theme.primaryColor : \"gray\"\n    //   // }`\n    //   style.border = borderStyling\n    //   style.outline = borderStyling\n    // }\n\n    onmouseover = (e): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    setState(hover_style)\n    // setValue(name)\n\n    }\n\n    onmousedown = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    setState(click_style)\n    Streamlit.setComponentValue(name)\n    // setValue(name)\n\n    }\n\n    onmouseout = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    setState(card_style)\n\n    // setValue(name)\n\n    }\n\n    onmouseup = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    setState(card_style)\n\n    // setValue(name)\n\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <div onMouseDown={() => onmousedown} \n          style={clicked} \n          onMouseOut={() => onmouseout} \n          onMouseOver={() => onmouseover}\n          onMouseUp={() => onmouseup}>\n        <img style={img_style} src={image_path} alt=\"App_Image\"/>\n        <h1 style={title_style}>{name}</h1>\n      </div>\n    )\n\n  /** Click handler for our \"Click Me!\" button. */\n\n\n  /** Focus handler for our \"Click Me!\" button. */\n  // private _onFocus = (): void => {\n  //   this.setState({ isFocused: true })\n  // }\n\n  // /** Blur handler for our \"Click Me!\" button. */\n  // private _onBlur = (): void => {\n  //   this.setState({ isFocused: false })\n  // }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(ClickableCard)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}