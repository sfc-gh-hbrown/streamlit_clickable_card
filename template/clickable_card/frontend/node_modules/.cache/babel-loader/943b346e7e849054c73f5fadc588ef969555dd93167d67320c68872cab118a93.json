{"ast":null,"code":"var _jsxFileName = \"/Users/hbrown/Documents/custom_components/clickable_card/template/my_component/frontend/src/MyComponent.tsx\",\n  _s = $RefreshSig$();\n// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React, { useEffect, ReactNode } from \"react\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useEffect } from \"react\";\n// import Box from '@material-ui/core/Box'\n// import { createTheme } from '@material-ui/core/styles';\n// import { Slider, Grid } from \"@material-ui/core\";\n// import { ThemeProvider } from '@material-ui/styles';\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClickableCard = props => {\n  _s();\n  // Arguments that are passed to the plugin in Python are accessible\n  // via `this.props.args`. Here, we access the \"name\" arg.\n  useEffect(() => Streamlit.setFrameHeight(315));\n  // const name = props.args[\"name\"]\n  const image_path = props.args[\"path\"];\n  // var clicked = false\n  const [name, setValue] = React.useState(props.args[\"name\"]);\n  var [clicked, newValue] = React.useState(\"Released\");\n  // Streamlit sends us a theme object via props that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n  const {\n    theme\n  } = props;\n  const card_style = {\n    display: \"grid\",\n    width: \"300px\",\n    height: \"300px\",\n    borderRadius: \"25px\",\n    color: \"black\",\n    cursor: \"pointer\",\n    // lineHeight: \"10px\",\n    // float: \"left\",\n    boxShadow: \"5px 5px 10px #ccc\",\n    overflow: \"hidden\",\n    marginLeft: \"20px\"\n  };\n  const hover_style = {\n    display: \"grid\",\n    width: \"300px\",\n    height: \"300px\",\n    borderRadius: \"25px\",\n    color: \"black\",\n    cursor: \"pointer\",\n    // lineHeight: \"10px\",\n    // float: \"left\",\n    boxShadow: \"0 3px 10px 2px #444\",\n    overflow: \"hidden\",\n    marginLeft: \"20px\"\n  };\n  const style = {\n    display: \"grid\",\n    width: \"300px\",\n    height: \"300px\",\n    borderRadius: \"25px\",\n    color: \"black\",\n    cursor: \"pointer\",\n    // lineHeight: \"10px\",\n    // float: \"left\",\n    boxShadow: \"5px 5px 10px #ccc\",\n    overflow: \"hidden\",\n    marginLeft: \"20px\"\n  };\n  const img_style = {\n    objectFit: \"cover\",\n    width: \"100%\",\n    height: \"100%\"\n  };\n  const title_style = {\n    alignItems: \"right\",\n    padding: \"10px\"\n  };\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  // if (theme) {\n  //   // Use the theme object to style our button border. Alternatively, the\n  //   // theme style is defined in CSS vars.\n  //   // const borderStyling = `1px solid ${\n  //   //   this.state.isFocused ? theme.primaryColor : \"gray\"\n  //   // }`\n  //   style.border = borderStyling\n  //   style.outline = borderStyling\n  // }\n\n  onmouseover = e => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    e.target.style = hover_style;\n    clicked = \"Hovered\";\n    Streamlit.setComponentValue(clicked);\n    // setValue(name)\n  };\n\n  onclick = () => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    e.target.style = style;\n    clicked = \"Clicked\";\n    Streamlit.setComponentValue(clicked);\n    // setValue(name)\n  };\n\n  onmouseout = () => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    clicked = \"Released\";\n    Streamlit.setComponentValue(clicked);\n\n    // setValue(name)\n  };\n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => onclick,\n    style: clicked == \"Clicked\" ? card_style : clicked == \"Hovered\" ? hover_style : style,\n    onMouseUp: () => onmouseout,\n    onMouseOver: () => onmouseover,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      style: img_style,\n      src: image_path,\n      alt: \"App_Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: title_style,\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 7\n  }, this);\n\n  /** Click handler for our \"Click Me!\" button. */\n\n  /** Focus handler for our \"Click Me!\" button. */\n  // private _onFocus = (): void => {\n  //   this.setState({ isFocused: true })\n  // }\n\n  // /** Blur handler for our \"Click Me!\" button. */\n  // private _onBlur = (): void => {\n  //   this.setState({ isFocused: false })\n  // }\n};\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n_s(ClickableCard, \"PrFOVg7zZ/E5VJVJGvs1s2FAcHU=\");\n_c = ClickableCard;\nexport default _c2 = withStreamlitConnection(ClickableCard);\nvar _c, _c2;\n$RefreshReg$(_c, \"ClickableCard\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","React","useEffect","jsxDEV","_jsxDEV","ClickableCard","props","_s","setFrameHeight","image_path","args","name","setValue","useState","clicked","newValue","theme","card_style","display","width","height","borderRadius","color","cursor","boxShadow","overflow","marginLeft","hover_style","style","img_style","objectFit","title_style","alignItems","padding","onmouseover","e","target","setComponentValue","onclick","onmouseout","onClick","onMouseUp","onMouseOver","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","$RefreshReg$"],"sources":["/Users/hbrown/Documents/custom_components/clickable_card/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["// import {\n//   Streamlit,\n//   StreamlitComponentBase,\n//   withStreamlitConnection,\n// } from \"streamlit-component-lib\"\n// import React, { useEffect, ReactNode } from \"react\";\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { useEffect } from \"react\"\n// import Box from '@material-ui/core/Box'\n// import { createTheme } from '@material-ui/core/styles';\n// import { Slider, Grid } from \"@material-ui/core\";\n// import { ThemeProvider } from '@material-ui/styles';\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst ClickableCard = (props: ComponentProps) => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    useEffect(() => Streamlit.setFrameHeight(315));\n    // const name = props.args[\"name\"]\n    const image_path = props.args[\"path\"]\n    // var clicked = false\n    const [name, setValue] = React.useState(\n      props.args[\"name\"]\n    )\n    var [clicked, newValue] = React.useState(\n      \"Released\"\n    )\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = props\n    const card_style: React.CSSProperties = {\n      display: \"grid\",\n      width: \"300px\",\n      height: \"300px\",\n      borderRadius: \"25px\",\n      color: \"black\",\n      cursor: \"pointer\",\n      // lineHeight: \"10px\",\n      // float: \"left\",\n      boxShadow: \"5px 5px 10px #ccc\",\n      overflow:\"hidden\",\n      marginLeft: \"20px\"\n    }\n\n    const hover_style: React.CSSProperties = {\n      display: \"grid\",\n      width: \"300px\",\n      height: \"300px\",\n      borderRadius: \"25px\",\n      color: \"black\",\n      cursor: \"pointer\",\n      // lineHeight: \"10px\",\n      // float: \"left\",\n      boxShadow: \"0 3px 10px 2px #444\",\n      overflow:\"hidden\",\n      marginLeft: \"20px\"\n    }\n\n    const style: React.CSSProperties = {\n      display: \"grid\",\n      width: \"300px\",\n      height: \"300px\",\n      borderRadius: \"25px\",\n      color: \"black\",\n      cursor: \"pointer\",\n      // lineHeight: \"10px\",\n      // float: \"left\",\n      boxShadow: \"5px 5px 10px #ccc\",\n      overflow:\"hidden\",\n      marginLeft: \"20px\"\n    }\n\n    const img_style: React.CSSProperties = {\n      objectFit: \"cover\",\n      width: \"100%\",\n      height:\"100%\"\n    }\n\n    const title_style: React.CSSProperties = {\n      alignItems: \"right\",\n      padding:\"10px\"\n    }\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    // if (theme) {\n    //   // Use the theme object to style our button border. Alternatively, the\n    //   // theme style is defined in CSS vars.\n    //   // const borderStyling = `1px solid ${\n    //   //   this.state.isFocused ? theme.primaryColor : \"gray\"\n    //   // }`\n    //   style.border = borderStyling\n    //   style.outline = borderStyling\n    // }\n\n    onmouseover = (e): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    e.target.style = hover_style\n    clicked = \"Hovered\"\n    Streamlit.setComponentValue(clicked)\n    // setValue(name)\n\n    }\n\n    onclick = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    e.target.style = style\n    clicked = \"Clicked\"\n    Streamlit.setComponentValue(clicked)\n    // setValue(name)\n\n    }\n\n    onmouseout = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    clicked = \"Released\"\n    Streamlit.setComponentValue(clicked)\n\n    // setValue(name)\n\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <div onClick={() => onclick} style={clicked == \"Clicked\" ? card_style : (clicked == \"Hovered\" ? hover_style : style)} onMouseUp={() => onmouseout} onMouseOver={() => onmouseover}>\n        <img style={img_style} src={image_path} alt=\"App_Image\"/>\n        <h1 style={title_style}>{name}</h1>\n      </div>\n    )\n\n  /** Click handler for our \"Click Me!\" button. */\n\n\n  /** Focus handler for our \"Click Me!\" button. */\n  // private _onFocus = (): void => {\n  //   this.setState({ isFocused: true })\n  // }\n\n  // /** Blur handler for our \"Click Me!\" button. */\n  // private _onBlur = (): void => {\n  //   this.setState({ isFocused: false })\n  // }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(ClickableCard)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}