{"ast":null,"code":"var _jsxFileName = \"/Users/hbrown/Documents/custom_components/clickable_card/template/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"];\n\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {\n        display: \"grid\",\n        marginTop: \"30px\",\n        marginBottom: \"30px\",\n        width: \"300px\",\n        height: \"300px\",\n        boxSizing: \"border-box\",\n        borderRadius: \"25px\",\n        color: \"black\",\n        lineHeight: \"100px\",\n        float: \"left\",\n        boxShadow: \"5px 5px 10px #ccc\",\n        marginRight: \"1em\",\n        overflow: \"auto\"\n      };\n      const img_style = {\n        objectFit: \"cover\",\n        width: \"100%\",\n        height: \"100%\"\n      };\n      const title_style = {\n        alignItems: \"bottom\"\n      };\n\n      // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: this.onClicked,\n        style: style,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          style: img_style,\n          src: require(\"./blue.png\"),\n          alt: \"App_Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          style: title_style,\n          children: \"App Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this);\n    };\n    /** Click handler for our \"Click Me!\" button. */\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.name));\n    };\n    /** Focus handler for our \"Click Me!\" button. */\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n    /** Blur handler for our \"Click Me!\" button. */\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(MyComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","jsxDEV","_jsxDEV","MyComponent","constructor","arguments","state","numClicks","isFocused","render","name","props","args","theme","style","display","marginTop","marginBottom","width","height","boxSizing","borderRadius","color","lineHeight","float","boxShadow","marginRight","overflow","img_style","objectFit","title_style","alignItems","borderStyling","primaryColor","border","outline","onClick","onClicked","children","src","require","alt","fileName","_jsxFileName","lineNumber","columnNumber","setState","prevState","setComponentValue","_onFocus","_onBlur","_c","$RefreshReg$"],"sources":["/Users/hbrown/Documents/custom_components/clickable_card/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {\n      display: \"grid\",\n      marginTop: \"30px\",\n      marginBottom: \"30px\",\n      width: \"300px\",\n      height: \"300px\",\n      boxSizing: \"border-box\",\n      borderRadius: \"25px\",\n      color: \"black\",\n      lineHeight: \"100px\",\n      float: \"left\",\n      boxShadow: \"5px 5px 10px #ccc\",\n      marginRight: \"1em\",\n      overflow:\"auto\"\n    }\n\n    const img_style: React.CSSProperties = {\n      objectFit: \"cover\",\n      width: \"100%\",\n      height:\"100%\"\n    }\n\n    const title_style: React.CSSProperties = {\n      alignItems: \"bottom\"\n    }\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <div onClick={this.onClicked} style={style}>\n        <img style={img_style} src={require(\"./blue.png\")} alt=\"App_Image\"/>\n        <h1 style={title_style}>App Name</h1>\n      </div>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.name)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}